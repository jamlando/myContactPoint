// Generated by Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
#ifndef POSTHOG_SWIFT_H
#define POSTHOG_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PostHog",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class PostHogEvent;
SWIFT_CLASS("_TtC7PostHog20BoxedBeforeSendBlock")
@interface BoxedBeforeSendBlock : NSObject
@property (nonatomic, readonly, copy) PostHogEvent * _Nullable (^ _Nonnull block)(PostHogEvent * _Nonnull);
- (nonnull instancetype)block:(PostHogEvent * _Nullable (^ _Nonnull)(PostHogEvent * _Nonnull))block OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@class NSString;
enum PostHogDataMode : NSInteger;
@class NSUUID;
@protocol PostHogPropertiesSanitizer;
enum PostHogPersonProfiles : NSInteger;
@class PostHogSurveysConfig;
SWIFT_CLASS_NAMED("PostHogConfig")
@interface PostHogConfig : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull host;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
@property (nonatomic) NSInteger flushAt;
@property (nonatomic) NSInteger maxQueueSize;
@property (nonatomic) NSInteger maxBatchSize;
@property (nonatomic) NSTimeInterval flushIntervalSeconds;
@property (nonatomic) enum PostHogDataMode dataMode;
@property (nonatomic) BOOL sendFeatureFlagEvent;
@property (nonatomic) BOOL preloadFeatureFlags;
/// Preload PostHog remote config automatically
/// Default: true
/// Note: Surveys rely on remote config. Disabling this will also disable Surveys
@property (nonatomic) BOOL remoteConfig;
@property (nonatomic) BOOL captureApplicationLifecycleEvents;
@property (nonatomic) BOOL captureScreenViews;
@property (nonatomic) BOOL debug;
@property (nonatomic) BOOL optOut;
@property (nonatomic, copy) NSUUID * _Nonnull (^ _Nonnull getAnonymousId)(NSUUID * _Nonnull);
/// Flag to reuse the anonymous Id between <code>reset()</code> and next <code>identify()</code> calls
/// If enabled, the anonymous Id will be reused for all anonymous users on this device,
/// essentially creating a “Guest user Id” as long as this option is enabled.
/// Note:
/// Events captured <em>before</em> call to <em>identify()</em> won’t be linked to the identified user
/// Events captured <em>after</em>  call to <em>reset()</em> won’t be linked to the identified user
/// Defaults to false.
@property (nonatomic) BOOL reuseAnonymousId;
/// Hook that allows to sanitize the event properties
/// The hook is called before the event is cached or sent over the wire
@property (nonatomic, strong) id <PostHogPropertiesSanitizer> _Nullable propertiesSanitizer SWIFT_DEPRECATED_MSG("Use beforeSend instead");
/// Determines the behavior for processing user profiles.
@property (nonatomic) enum PostHogPersonProfiles personProfiles;
/// Automatically set common device and app properties as person properties for feature flag evaluation.
/// When enabled, the SDK will automatically set the following person properties:
/// <ul>
///   <li>
///     $app_version: App version from bundle
///   </li>
///   <li>
///     $app_build: App build number from bundle
///   </li>
///   <li>
///     $os_name: Operating system name (iOS, macOS, etc.)
///   </li>
///   <li>
///     $os_version: Operating system version
///   </li>
///   <li>
///     $device_type: Device type (Mobile, Tablet, Desktop, etc.)
///   </li>
///   <li>
///     $locale: User’s current locale
///   </li>
/// </ul>
/// This helps ensure feature flags that rely on these properties work correctly
/// without waiting for server-side processing of identify() calls.
/// Default: true
@property (nonatomic) BOOL setDefaultPersonProperties;
/// The identifier of the App Group that should be used to store shared analytics data.
/// PostHog will try to get the physical location of the App Group’s shared container, otherwise fallback to the default location
/// Default: nil
@property (nonatomic, copy) NSString * _Nullable appGroupIdentifier;
/// Internal
/// Do not modify it, this flag is read and updated by the SDK via feature flags
@property (nonatomic, copy) NSString * _Nonnull snapshotEndpoint;
/// Enable mobile surveys
/// Default: false
/// Note: Event triggers will only work with the instance that first enables surveys.
/// In case of multiple instances, please make sure you are capturing events on the instance that has config.surveys = true
@property (nonatomic) BOOL surveys SWIFT_AVAILABILITY(visionos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(tvos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(macos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(watchos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(ios,introduced=15.0);
@property (nonatomic, strong) PostHogSurveysConfig * _Nonnull surveysConfig SWIFT_AVAILABILITY(visionos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(tvos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(macos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(watchos,unavailable,message="Surveys are only available on iOS 15+") SWIFT_AVAILABILITY(ios,introduced=15.0);
- (nonnull instancetype)apiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)apiKey:(NSString * _Nonnull)apiKey host:(NSString * _Nonnull)host OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (void)setBeforeSend:(NSArray<BoxedBeforeSendBlock *> * _Nonnull)blocks SWIFT_UNAVAILABLE_MSG("Use setBeforeSend(_ blocks: BeforeSendBlock...) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PostHogDataMode, "PostHogDataMode", closed) {
  PostHogDataModeWifi = 0,
  PostHogDataModeCellular = 1,
  PostHogDataModeAny = 2,
};

enum PostHogDisplaySurveyTextContentType : NSInteger;
/// Base class for all survey question types
SWIFT_CLASS("_TtC7PostHog28PostHogDisplaySurveyQuestion")
@interface PostHogDisplaySurveyQuestion : NSObject
/// The main question text to display
@property (nonatomic, readonly, copy) NSString * _Nonnull question;
/// Optional additional description or context for the question
@property (nonatomic, readonly, copy) NSString * _Nullable questionDescription;
/// Content type for the question description (HTML or plain text)
@property (nonatomic, readonly) enum PostHogDisplaySurveyTextContentType questionDescriptionContentType;
/// Whether the question can be skipped
@property (nonatomic, readonly) BOOL isOptional;
/// Optional custom text for the question’s action button
@property (nonatomic, readonly, copy) NSString * _Nullable buttonText;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a multiple or single choice question where users can select one or more options
SWIFT_CLASS("_TtC7PostHog28PostHogDisplayChoiceQuestion")
@interface PostHogDisplayChoiceQuestion : PostHogDisplaySurveyQuestion
@end

/// Represents a question with a clickable link
SWIFT_CLASS("_TtC7PostHog26PostHogDisplayLinkQuestion")
@interface PostHogDisplayLinkQuestion : PostHogDisplaySurveyQuestion
@end

/// Represents an open-ended question where users can input free-form text
SWIFT_CLASS("_TtC7PostHog26PostHogDisplayOpenQuestion")
@interface PostHogDisplayOpenQuestion : PostHogDisplaySurveyQuestion
@end

/// Represents a rating question where users can select a rating from a scale
SWIFT_CLASS("_TtC7PostHog28PostHogDisplayRatingQuestion")
@interface PostHogDisplayRatingQuestion : PostHogDisplaySurveyQuestion
@end

/// A model representing a PostHog survey to be displayed to users
SWIFT_CLASS("_TtC7PostHog20PostHogDisplaySurvey")
@interface PostHogDisplaySurvey : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Model that describes the appearance customization of a PostHog survey
SWIFT_CLASS("_TtC7PostHog30PostHogDisplaySurveyAppearance")
@interface PostHogDisplaySurveyAppearance : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Type of rating display for survey rating questions
typedef SWIFT_ENUM(NSInteger, PostHogDisplaySurveyRatingType, closed) {
/// Display numeric rating options
  PostHogDisplaySurveyRatingTypeNumber = 0,
/// Display emoji rating options
  PostHogDisplaySurveyRatingTypeEmoji = 1,
};

/// Content type for text-based survey elements
typedef SWIFT_ENUM(NSInteger, PostHogDisplaySurveyTextContentType, closed) {
/// Content should be rendered as HTML
  PostHogDisplaySurveyTextContentTypeHtml = 0,
/// Content should be rendered as plain text
  PostHogDisplaySurveyTextContentTypeText = 1,
};

@class NSDate;
SWIFT_CLASS_NAMED("PostHogEvent")
@interface PostHogEvent : NSObject
@property (nonatomic, copy) NSString * _Nonnull event;
@property (nonatomic, copy) NSString * _Nonnull distinctId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull properties;
@property (nonatomic, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A model representing the next state of the survey progression.
SWIFT_CLASS("_TtC7PostHog25PostHogNextSurveyQuestion")
@interface PostHogNextSurveyQuestion : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Determines the behavior for processing user profiles.
/// <ul>
///   <li>
///     <code>never</code>: We won’t process persons for any event. This means that anonymous users will not be merged once
///     they sign up or login, so you lose the ability to create funnels that track users from anonymous to identified.
///     All events (including <code>$identify</code>) will be sent with <code>$process_person_profile: False</code>.
///   </li>
///   <li>
///     <code>always</code>: We will process persons data for all events.
///   </li>
///   <li>
///     <code>identifiedOnly</code>: (default): we will only process persons when you call <code>identify</code>, <code>alias</code>, and <code>group</code>, Anonymous users won’t get person profiles.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, PostHogPersonProfiles, "PostHogPersonProfiles", closed) {
  PostHogPersonProfilesNever = 0,
  PostHogPersonProfilesAlways = 1,
  PostHogPersonProfilesIdentifiedOnly = 2,
};

/// Protocol to sanitize the event properties
SWIFT_PROTOCOL_NAMED("PostHogPropertiesSanitizer")
@protocol PostHogPropertiesSanitizer
/// Sanitizes the event properties
/// Obs: <code>inout</code> cannot be used in Swift protocols, so you need to clone the properties
/// \code
/// private class ExampleSanitizer: PostHogPropertiesSanitizer {
///     public func sanitize(_ properties: [String: Any]) -> [String: Any] {
///         var sanitizedProperties = properties
///         // Perform sanitization
///         // For example, removing keys with empty values
///         for (key, value) in properties {
///             if let stringValue = value as? String, stringValue.isEmpty {
///                 sanitizedProperties.removeValue(forKey: key)
///             }
///         }
///         return sanitizedProperties
///     }
/// }
///
/// \endcode\param properties the event properties to sanitize
///
///
/// returns:
/// the sanitized properties
- (NSDictionary<NSString *, id> * _Nonnull)sanitize:(NSDictionary<NSString *, id> * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7PostHog10PostHogSDK")
@interface PostHogSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PostHogSDK * _Nonnull shared;)
+ (PostHogSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)debug:(BOOL)enabled;
- (void)setup:(PostHogConfig * _Nonnull)config;
- (NSString * _Nonnull)getDistinctId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAnonymousId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT;
- (void)startSession;
- (void)endSession;
- (void)flush;
- (void)reset;
- (void)registerProperties:(NSDictionary<NSString *, id> * _Nonnull)properties;
- (void)unregisterProperties:(NSString * _Nonnull)key;
- (void)identify:(NSString * _Nonnull)distinctId;
- (void)identifyWithDistinctId:(NSString * _Nonnull)distinctId userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties;
- (void)identifyWithDistinctId:(NSString * _Nonnull)distinctId userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce;
- (void)capture:(NSString * _Nonnull)event;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce groups:(NSDictionary<NSString *, NSString *> * _Nullable)groups;
- (void)captureWithEvent:(NSString * _Nonnull)event distinctId:(NSString * _Nullable)distinctId properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce groups:(NSDictionary<NSString *, NSString *> * _Nullable)groups;
- (void)captureWithEvent:(NSString * _Nonnull)event distinctId:(NSString * _Nullable)distinctId properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce groups:(NSDictionary<NSString *, NSString *> * _Nullable)groups timestamp:(NSDate * _Nullable)timestamp;
- (void)screen:(NSString * _Nonnull)screenTitle;
- (void)screenWithTitle:(NSString * _Nonnull)screenTitle properties:(NSDictionary<NSString *, id> * _Nullable)properties;
- (void)alias:(NSString * _Nonnull)alias;
- (void)groupWithType:(NSString * _Nonnull)type key:(NSString * _Nonnull)key;
- (void)groupWithType:(NSString * _Nonnull)type key:(NSString * _Nonnull)key groupProperties:(NSDictionary<NSString *, id> * _Nullable)groupProperties;
/// Sets person properties that will be included in feature flag evaluation requests.
/// This method allows you to override server-side person properties for immediate feature flag evaluation,
/// solving the race condition where person properties from <code>identify()</code> calls may not have been processed
/// by the server yet.
/// Properties are merged additively with existing properties. Feature flags are automatically reloaded
/// after setting properties.
/// <h2>Example Usage</h2>
/// \code
/// // Set properties and automatically reload flags
/// PostHogSDK.shared.setPersonPropertiesForFlags([
///     "$app_version": "2.93.0",
///     "plan": "premium"
/// ])
///
/// // Now feature flags will be evaluated with these properties
/// let flagValue = PostHogSDK.shared.isFeatureEnabled("new_feature")
///
/// \endcodeseealso:
/// <code>setPersonPropertiesForFlags(_:reloadFeatureFlags:)</code> to control flag reloading behavior
/// \param properties Dictionary of person properties to include in flag evaluation
///
- (void)setPersonPropertiesForFlags:(NSDictionary<NSString *, id> * _Nonnull)properties;
/// Sets person properties that will be included in feature flag evaluation requests.
/// This method allows you to override server-side person properties for immediate feature flag evaluation,
/// solving the race condition where person properties from <code>identify()</code> calls may not have been processed
/// by the server yet.
/// Properties are merged additively with existing properties.
/// <h2>Example Usage</h2>
/// \code
/// // Set properties without automatically reloading flags
/// PostHogSDK.shared.setPersonPropertiesForFlags([
///     "$app_version": "2.93.0",
///     "plan": "premium"
/// ], reloadFeatureFlags: false)
///
/// // Manually reload flags later
/// PostHogSDK.shared.reloadFeatureFlags()
///
/// \endcode\param properties Dictionary of person properties to include in flag evaluation
///
/// \param reloadFeatureFlags Whether to automatically reload feature flags after setting properties
///
- (void)setPersonPropertiesForFlagsWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties reloadFeatureFlags:(BOOL)reloadFeatureFlags;
/// Resets all person properties that were set for feature flag evaluation.
/// After calling this method, feature flag evaluation will only use server-side person properties
/// and will not include any locally overridden properties.
/// <h2>Example Usage</h2>
/// \code
/// // Clear all locally set person properties for flags
/// PostHogSDK.shared.resetPersonPropertiesForFlags()
///
/// // Feature flags will now use only server-side properties
/// let flagValue = PostHogSDK.shared.isFeatureEnabled("feature")
///
/// \endcodenote:
/// This method does not automatically reload feature flags. Call <code>reloadFeatureFlags()</code>
/// after resetting if you want to immediately refresh flags with the cleared properties.
- (void)resetPersonPropertiesForFlags;
/// Sets properties for a specific group type to include when evaluating feature flags.
/// These properties supplement the standard group information sent to PostHog for flag evaluation,
/// providing additional context that can be used in flag targeting conditions.
/// <h2>Example Usage</h2>
/// \code
/// PostHogSDK.shared.setGroupPropertiesForFlags("organization", properties: [
///     "plan": "enterprise",
///     "seats": 50,
///     "industry": "technology"
/// ])
///
/// \endcodenote:
/// This method automatically reloads feature flags to apply the new properties.
/// seealso:
/// <code>setGroupPropertiesForFlags(_:properties:reloadFeatureFlags:)</code> to control flag reloading behavior
/// \param groupType The group type identifier (e.g., “organization”, “team”)
///
/// \param properties Dictionary of properties to set for this group type
///
- (void)setGroupPropertiesForFlags:(NSString * _Nonnull)groupType properties:(NSDictionary<NSString *, id> * _Nonnull)properties;
/// Sets properties for a specific group type to include when evaluating feature flags.
/// These properties supplement the standard group information sent to PostHog for flag evaluation,
/// providing additional context that can be used in flag targeting conditions.
/// <h2>Example Usage</h2>
/// \code
/// // Set properties without automatically reloading flags
/// PostHogSDK.shared.setGroupPropertiesForFlags("organization", properties: [
///     "plan": "enterprise",
///     "seats": 50
/// ], reloadFeatureFlags: false)
///
/// // Manually reload flags later
/// PostHogSDK.shared.reloadFeatureFlags()
///
/// \endcode\param groupType The group type identifier (e.g., “organization”, “team”)
///
/// \param properties Dictionary of properties to set for this group type
///
/// \param reloadFeatureFlags Whether to automatically reload feature flags after setting properties
///
- (void)setGroupPropertiesForFlags:(NSString * _Nonnull)groupType properties:(NSDictionary<NSString *, id> * _Nonnull)properties reloadFeatureFlags:(BOOL)reloadFeatureFlags;
/// Clears all group properties for feature flag evaluation.
/// <h2>Example Usage</h2>
/// \code
/// // Clear all group properties
/// PostHogSDK.shared.resetGroupPropertiesForFlags()
///
/// \endcodenote:
/// This method does not automatically reload feature flags. Call <code>reloadFeatureFlags()</code>
/// after resetting if you want to immediately refresh flags with the cleared properties.
- (void)resetGroupPropertiesForFlags;
/// Clears group properties for feature flag evaluation for a specific group type.
/// <h2>Example Usage</h2>
/// \code
/// // Clear properties for specific group type
/// PostHogSDK.shared.resetGroupPropertiesForFlags("organization")
///
/// \endcodenote:
/// This method does not automatically reload feature flags. Call <code>reloadFeatureFlags()</code>
/// after resetting if you want to immediately refresh flags with the cleared properties.
/// \param groupType The group type to clear properties for
///
- (void)resetGroupPropertiesForFlagsWithGroupType:(NSString * _Nonnull)groupType;
- (void)reloadFeatureFlags;
- (void)reloadFeatureFlagsWithCallback:(void (^ _Nonnull)(void))callback;
- (id _Nullable)getFeatureFlag:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFeatureEnabled:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getFeatureFlagPayload:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)optIn;
- (void)optOut;
- (BOOL)isOptOut SWIFT_WARN_UNUSED_RESULT;
- (void)close;
+ (PostHogSDK * _Nonnull)with:(PostHogConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface PostHogSDK (SWIFT_EXTENSION(PostHog))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStartNotification;)
+ (NSNotificationName _Nonnull)didStartNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didReceiveFeatureFlags;)
+ (NSNotificationName _Nonnull)didReceiveFeatureFlags SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7PostHog21PostHogSessionManager")
@interface PostHogSessionManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PostHogSessionManager * _Nonnull shared;)
+ (PostHogSessionManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setSessionId:(NSString * _Nonnull)sessionId;
@end

enum PostHogSurveyResponseType : NSInteger;
/// A model representing a user’s response to a survey question
SWIFT_CLASS("_TtC7PostHog21PostHogSurveyResponse")
@interface PostHogSurveyResponse : NSObject
/// The type of response (link, rating, text, or multiple choice)
@property (nonatomic, readonly) enum PostHogSurveyResponseType type;
/// The text response (for open questions)
@property (nonatomic, readonly, copy) NSString * _Nullable textValue;
/// The selected options (for multiple or single choice questions)
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable selectedOptions;
/// Creates a response for a link question
/// \param clicked Whether the link was clicked
///
+ (PostHogSurveyResponse * _Nonnull)link:(BOOL)clicked SWIFT_WARN_UNUSED_RESULT;
/// Creates a response for an open-ended question
/// \param openEnded The text response
///
+ (PostHogSurveyResponse * _Nonnull)openEnded:(NSString * _Nullable)openEnded SWIFT_WARN_UNUSED_RESULT;
/// Creates a response for a single-choice question
/// \param singleChoice The selected option
///
+ (PostHogSurveyResponse * _Nonnull)singleChoice:(NSString * _Nullable)singleChoice SWIFT_WARN_UNUSED_RESULT;
/// Creates a response for a multiple-choice question
/// \param multipleChoice The selected options
///
+ (PostHogSurveyResponse * _Nonnull)multipleChoice:(NSArray<NSString *> * _Nullable)multipleChoice SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PostHogSurveyResponseType, closed) {
  PostHogSurveyResponseTypeLink = 0,
  PostHogSurveyResponseTypeRating = 1,
  PostHogSurveyResponseTypeOpenEnded = 2,
  PostHogSurveyResponseTypeSingleChoice = 3,
  PostHogSurveyResponseTypeMultipleChoice = 4,
};

SWIFT_CLASS("_TtC7PostHog20PostHogSurveysConfig")
@interface PostHogSurveysConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_PROTOCOL("_TtP7PostHog22PostHogSurveysDelegate_")
@protocol PostHogSurveysDelegate
/// Called when an activated PostHog survey needs to be rendered on the app’s UI
/// \param survey The survey to be displayed to the user
///
/// \param onSurveyShown To be called when the survey is successfully displayed to the user.
///
/// \param onSurveyResponse To be called the user submits a response to a question.
///
/// \param onSurveyClosed To be called when the survey is dismissed
///
- (void)renderSurvey:(PostHogDisplaySurvey * _Nonnull)survey onSurveyShown:(void (^ _Nonnull)(PostHogDisplaySurvey * _Nonnull))onSurveyShown onSurveyResponse:(PostHogNextSurveyQuestion * _Nullable (^ _Nonnull)(PostHogDisplaySurvey * _Nonnull, NSInteger, PostHogSurveyResponse * _Nonnull))onSurveyResponse onSurveyClosed:(void (^ _Nonnull)(PostHogDisplaySurvey * _Nonnull))onSurveyClosed;
/// Called when surveys are stopped to clean up any UI elements and reset the survey display state.
/// This method should handle the dismissal of any active surveys and cleanup of associated resources.
- (void)cleanupSurveys;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
